// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ReactApp.Server.Data;

#nullable disable

namespace ReactApp.Server.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250318061108_CreateDecodeurContenuTable")]
    partial class CreateDecodeurContenuTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.2");

            modelBuilder.Entity("ReactApp.Server.Data.Client", b =>
                {
                    b.Property<int>("Id_Client")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("Id_Client");

                    b.Property<bool>("Actif")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Actif");

                    b.Property<string>("Adresse")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Adresse");

                    b.Property<DateTime>("Date_Inscription")
                        .HasColumnType("TEXT")
                        .HasColumnName("Date_Inscription");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Email");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Nom");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Telephone");

                    b.HasKey("Id_Client");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("ReactApp.Server.Data.Contenu", b =>
                {
                    b.Property<int>("id_contenu")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Actif")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Categorie")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("id_contenu");

                    b.ToTable("Contenus");
                });

            modelBuilder.Entity("ReactApp.Server.Data.DecodeurContenu", b =>
                {
                    b.Property<int>("id_decodeur")
                        .HasColumnType("INTEGER");

                    b.Property<int>("id_contenur")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Contenuid_contenu")
                        .HasColumnType("INTEGER");

                    b.HasKey("id_decodeur", "id_contenur");

                    b.HasIndex("Contenuid_contenu");

                    b.ToTable("DecodeurContenus");
                });

            modelBuilder.Entity("ReactApp.Server.Data.JournalOperation", b =>
                {
                    b.Property<int>("id_operation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("date_debut")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("date_fin")
                        .HasColumnType("TEXT");

                    b.Property<string>("details")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("id_decodeur")
                        .HasColumnType("INTEGER");

                    b.Property<int>("id_type_operation")
                        .HasColumnType("INTEGER");

                    b.Property<int>("id_utilisateur")
                        .HasColumnType("INTEGER");

                    b.Property<string>("statut")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("id_operation");

                    b.ToTable("JournalOperations");
                });

            modelBuilder.Entity("ReactApp.Server.Data.TypesOperation", b =>
                {
                    b.Property<int>("id_type_operation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("nom")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("temps_execution_moyen")
                        .HasColumnType("INTEGER");

                    b.HasKey("id_type_operation");

                    b.ToTable("TypesOperations");
                });

            modelBuilder.Entity("ReactApp.Server.Data.Utilisateur", b =>
                {
                    b.Property<int>("id_utilisateur")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_utilisateur");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("email");

                    b.Property<bool>("est_administrateur")
                        .HasColumnType("INTEGER")
                        .HasColumnName("est_administrateur");

                    b.Property<string>("mot_de_passe")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("mot_de_passe");

                    b.Property<string>("nom_utilisateur")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("nom_utilisateur");

                    b.HasKey("id_utilisateur");

                    b.ToTable("Utilisateurs");
                });

            modelBuilder.Entity("ReactApp.Server.Data.UtilisateursClients", b =>
                {
                    b.Property<int>("id_utilisateur")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_utilisateur");

                    b.Property<int>("id_client")
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_client");

                    b.HasKey("id_utilisateur");

                    b.ToTable("UtilisateursClients");
                });

            modelBuilder.Entity("ReactApp.Server.Data.VueUtilisateurActivites", b =>
                {
                    b.Property<int>("Id_Utilisateur")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_utilisateur");

                    b.Property<string>("Adresse_Client")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("adresse_client");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("email");

                    b.Property<bool>("EstAdministrateur")
                        .HasColumnType("INTEGER")
                        .HasColumnName("est_administrateur");

                    b.Property<string>("Mot_de_passe")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("mot_de_passe");

                    b.Property<string>("Nom_Client")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("nom_client");

                    b.Property<string>("Nom_Utilisateur")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("nom_utilisateur");

                    b.Property<int>("Nombre_Decodeurs")
                        .HasColumnType("INTEGER")
                        .HasColumnName("nombre_decodeurs");

                    b.Property<int>("Nombre_Operations")
                        .HasColumnType("INTEGER")
                        .HasColumnName("nombre_operations");

                    b.HasKey("Id_Utilisateur");

                    b.ToTable("Vue_Utilisateur_Activites");
                });

            modelBuilder.Entity("ReactApp.Server.Models.Decodeur", b =>
                {
                    b.Property<int>("id_decodeur")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("adresse_ip")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("date_installation")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("derniere_mise_a_jour")
                        .HasColumnType("TEXT");

                    b.Property<string>("etat")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("id_client")
                        .HasColumnType("INTEGER");

                    b.Property<string>("modele")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("mot_de_passe")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("numero_serie")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("id_decodeur");

                    b.HasIndex("id_client");

                    b.ToTable("Decodeurs");
                });

            modelBuilder.Entity("ReactApp.Server.Data.DecodeurContenu", b =>
                {
                    b.HasOne("ReactApp.Server.Data.Contenu", "Contenu")
                        .WithMany()
                        .HasForeignKey("Contenuid_contenu")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReactApp.Server.Models.Decodeur", "Decodeur")
                        .WithMany()
                        .HasForeignKey("id_decodeur")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contenu");

                    b.Navigation("Decodeur");
                });

            modelBuilder.Entity("ReactApp.Server.Models.Decodeur", b =>
                {
                    b.HasOne("ReactApp.Server.Data.Client", "Client")
                        .WithMany()
                        .HasForeignKey("id_client")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });
#pragma warning restore 612, 618
        }
    }
}
